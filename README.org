#+TITLE: amp.el
#+AUTHOR: Keegan Carruthers-Smith
#+MAINTAINER: Amp <amp@ampcode.com>

Official Emacs client for Amp's IDE mode.

Ported from [[https://github.com/sourcegraph/amp.nvim][amp.nvim]]. Inspired by [[https://github.com/manzaltu/claude-code-ide.el][claude-code-ide.el]].

* Status

Production-ready implementation based on amp.nvim architecture. Fully implements
the Amp IDE protocol with secure authentication, proper file URI handling, and
reliable diagnostics integration.

Implements the same IDE protocol as amp.nvim, providing:
- Selection tracking (cursor position and visual regions)
- Visible files tracking across windows
- File read/edit operations
- Pull-based diagnostics (via Flymake/eglot)
- Message sending to Amp agent

* Installation

** From MELPA (Recommended)

#+begin_src elisp
(use-package amp
  :ensure t
  :config
  (amp-mode 1))  ; Auto-start server on Emacs startup
#+end_src

Or with =package.el=:
#+begin_src elisp
M-x package-install RET amp RET
#+end_src

** Manual Installation

#+begin_src elisp
;; Add to load-path and load
(add-to-list 'load-path "/path/to/directory/containing/amp.el")
(require 'amp)
(amp-mode 1)  ; Optional: auto-start server
#+end_src

* Usage

1. Start the Amp server:
   - If using =amp-mode=, the server starts automatically
   - Or run =M-x amp-start= manually

2. Launch Amp CLI in a terminal:
#+begin_src shell
amp --ide
#+end_src

3. Amp will automatically:
   - Track your cursor position and selections
   - Monitor visible files across all windows
   - Provide diagnostics from Flymake/eglot
   - Allow file reading and editing through Emacs buffers

* Features

- **Secure WebSocket server** with lockfile-based discovery
  - Binds to localhost (127.0.0.1) by default for security
  - Random port (10000-65535) with restrictive lockfile permissions
  - Lockfile location: =$AMP_DATA_HOME/amp/ide/<port>.json= (or =$XDG_DATA_HOME/amp/ide/<port>.json=, defaults to =~/.local/share/amp/ide/<port>.json=)
  - Lockfile contains: port, authToken, pid, workspaceFolders, ideName
  - Authentication token validation enforced
  
- **Selection tracking** (cursor and visual regions)
  - Debounced updates (configurable via =amp-selection-debounce-ms=)
  - Automatic broadcast on cursor movement
  
- **Visible files tracking** across all windows

- **File operations**
  - Read files with proper UTF-8 encoding
  - Edit files with full content replacement
  - Proper file:// URI handling (cross-platform, percent-encoded)
  
- **Diagnostics integration**
  - Pull-based diagnostics via Flymake
  - Works with eglot/LSP automatically
  - Supports file or directory requests
  
- **Message sending** (userSentMessage, appendToPrompt)

- **Automatic cleanup** on Emacs exit or package unload

* Security

- Authentication tokens are validated for all requests (except ping)
- Server binds only to localhost (127.0.0.1)
- Lockfile permissions restricted to user-only (0600)
- Lock directory permissions restricted to user-only (0700)

* Limitations

- Multiple workspace folders not yet implemented (currently hardcoded to ["/"])

* Requirements

- Emacs 28.1+
- =websocket= package (1.12+)
- Amp CLI that supports =--ide= flag

Install the websocket package:
#+begin_src elisp
M-x package-install RET websocket RET
#+end_src

* Commands

| Command              | Purpose                                    |
|----------------------+--------------------------------------------|
| =amp-start=          | Start Amp WebSocket server                 |
| =amp-stop=           | Stop Amp WebSocket server                  |
| =amp-status=         | Show server status and connection info     |
| =amp-send-message=   | Send a message to the Amp agent            |
| =amp-send-region=    | Send selected region to Amp agent          |
| =amp-send-to-prompt= | Append text to Amp prompt field            |
| =amp-mode=           | Toggle global Amp mode (auto-start server) |

* Configuration

#+begin_src elisp
;; Customize log level (trace, debug, info, warn, error)
(setq amp-log-level 'info)

;; Enable amp-mode globally (automatically starts server)
(amp-mode 1)
#+end_src

* Debugging

View logs in the =*amp-log*= buffer to see connection status, selection changes,
and any errors. The log level can be controlled via =amp-log-level=.
